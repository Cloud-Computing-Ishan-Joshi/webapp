name: Node-Healthz

on:
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  build:
    name: Node
    runs-on: ubuntu-latest

    # This keyword is used to define the build strategy for your workflow. In this case, it's specifying a matrix strategy
    strategy:
      # This sub-keyword defines a matrix build strategy, which allows you to run your job in multiple configurations
      matrix:
        # This sub-keyword defines the Node.js version to use for the job
        node-version: [18.x]
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: ${{ secrets.DB_NAME }}
          POSTGRES_USER: ${{ secrets.DB_USER }}
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
          POSTGRES_PORT: 5432
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Install PostgreSQL client
        run: |
          sudo apt-get update
          sudo apt-get install --yes postgresql-client
      # queries database with postgres client
      - name: Query database
        run: psql -h $POSTGRES_HOST -d $POSTGRES_DB -U $POSTGRES_USER -c 'SELECT 1;'
        env:
          # postgress password is required; alternatively, you can run:
          # `PGPASSWORD=postgres_password psql ...`
          PGPASSWORD: ${{ secrets.DB_PASSWORD }}
          POSTGRES_DB: ${{ secrets.DB_NAME }}
          POSTGRES_USER: ${{ secrets.DB_USER }}
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
          POSTGRES_HOST: ${{ secrets.DB_HOST }}

      - name: Check out code
        uses: actions/checkout@v2

      - name: Use ${{matrix.node-version}} to setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      # - name: Check Postgres connection with password
      #   run: |
      #     # Use 'pg' module for secure password handling
      #     PGPASSWORD=${{ secrets.DB_PASSWORD }} psql -h $DB_HOST -U $DB_USER -d $DB_NAME -t -c "SELECT 1;" >/dev/null 2>&1
    
      #     if [[ $? -eq 0 ]]; then
      #       echo "Postgres connection successful!"
      #     else
      #       echo "Postgres connection failed!"
      #       exit 1
      #     fi
    
      #   env:
      #     DB_HOST: ${{ secrets.DB_HOST }}
      #     DB_USER: ${{ secrets.DB_USER }}
      #     DB_NAME: ${{ secrets.DB_NAME }}

      - name: Install dependencies
        run: npm install
      
      - name: Run Healthz test
        run: npm run test:cli
        env:
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_HOST: ${{ secrets.DB_HOST }}
          PORT: ${{ secrets.DB_PORT }}
          NODE_ENV: test
          DB_NAME_TEST: ${{ secrets.DB_NAME_TEST }}
          DB_NAME_ORIG: ${{ secrets.DB_NAME_ORIG }}
          LOGGER: ${{ secrets.LOGGER }}

        
      - name: Execute 1 for failure
        if: failure()
        run: exit 1